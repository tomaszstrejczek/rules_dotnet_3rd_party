diff --git a/src/NUnitFramework/framework/Internal/AssemblyHelper.cs b/src/NUnitFramework/framework/Internal/AssemblyHelper.cs
index 6f9280a4..793cde22 100644
--- src/NUnitFramework/framework/Internal/AssemblyHelper.cs
+++ src/NUnitFramework/framework/Internal/AssemblyHelper.cs
@@ -131,7 +131,7 @@ namespace NUnit.Framework.Internal
                         .CreateDelegate(typeof(Func<string, Assembly>), defaultContext);
 
                 assemblyLoadContextType.GetRuntimeEvent("Resolving").AddEventHandler(defaultContext,
-                    new Func<object, AssemblyName, Assembly>((context, assemblyName) =>
+                    new Func<System.Runtime.Loader.AssemblyLoadContext, AssemblyName, Assembly>((context, assemblyName) =>
                     {
                         var dllPath = Path.Combine(AppContext.BaseDirectory, assemblyName.Name + ".dll");
                         if (File.Exists(dllPath)) return loadFromAssemblyPath.Invoke(dllPath);
diff --git a/src/NUnitFramework/tests/Assertions/AssertThrowsAsyncTests.cs b/src/NUnitFramework/tests/Assertions/AssertThrowsAsyncTests.cs
index fa3ef62c..8560c5c7 100644
--- src/NUnitFramework/tests/Assertions/AssertThrowsAsyncTests.cs
+++ src/NUnitFramework/tests/Assertions/AssertThrowsAsyncTests.cs
@@ -217,7 +217,7 @@ namespace NUnit.Framework.Assertions
             var ex = CatchException(() => Assert.ThrowsAsync<Exception>(AsyncTestDelegates.ThrowsArgumentException));
             Assert.That(ex.Message, Does.StartWith(
                 "  Expected: <System.Exception>" + Environment.NewLine +
-                "  But was:  <System.ArgumentException: myMessage" + Environment.NewLine + "Parameter name: myParam" + Environment.NewLine));
+                "  But was:  <System.ArgumentException: myMessage (Parameter 'myParam')" + Environment.NewLine));
 
             CheckForSpuriousAssertionResults();
         }
@@ -228,7 +228,7 @@ namespace NUnit.Framework.Assertions
             var ex = CatchException(() => Assert.ThrowsAsync<Exception>(AsyncTestDelegates.ThrowsArgumentExceptionAsync));
             Assert.That(ex.Message, Does.StartWith(
                 "  Expected: <System.Exception>" + Environment.NewLine +
-                "  But was:  <System.ArgumentException: myMessage" + Environment.NewLine + "Parameter name: myParam" + Environment.NewLine));
+                "  But was:  <System.ArgumentException: myMessage (Parameter 'myParam')" + Environment.NewLine));
         }
 
         [Test]
diff --git a/src/NUnitFramework/tests/Assertions/AssertThrowsTests.cs b/src/NUnitFramework/tests/Assertions/AssertThrowsTests.cs
index 3fb5863b..71410ff3 100644
--- src/NUnitFramework/tests/Assertions/AssertThrowsTests.cs
+++ src/NUnitFramework/tests/Assertions/AssertThrowsTests.cs
@@ -58,7 +58,7 @@ namespace NUnit.Framework.Assertions
         {
             Console.WriteLine(1);
             Assert.That(
-                () => { Console.WriteLine(2); TestContext.WriteLine(3); throw new Exception("test"); }, 
+                () => { Console.WriteLine(2); TestContext.WriteLine(3); throw new Exception("test"); },
                 Throws.Exception);
             Console.WriteLine(4);
 
@@ -97,7 +97,7 @@ namespace NUnit.Framework.Assertions
         [Test]
         public void ThrowsConstraintSucceedsWithLambda()
         {
-            Assert.That(() => { throw new ArgumentException(); }, 
+            Assert.That(() => { throw new ArgumentException(); },
                 Throws.Exception.TypeOf<ArgumentException>());
         }
 
@@ -116,9 +116,9 @@ namespace NUnit.Framework.Assertions
 
         [Test]
         public void ThrowsReturnsCorrectException()
-        { 
-            var ex = Assert.Throws(typeof(ArgumentException), 
-                delegate { throw new ArgumentException("myMessage", "myParam"); } ) as ArgumentException;
+        {
+            var ex = Assert.Throws(typeof(ArgumentException),
+                delegate { throw new ArgumentException("myMessage", "myParam"); }) as ArgumentException;
 
             Assert.IsNotNull(ex, "No ArgumentException thrown");
             Assert.That(ex.Message, Does.StartWith("myMessage"));
@@ -130,7 +130,7 @@ namespace NUnit.Framework.Assertions
         [Test]
         public void NoExceptionThrown()
         {
-            var ex = CatchException(() => 
+            var ex = CatchException(() =>
                 Assert.Throws<ArgumentException>(TestDelegates.ThrowsNothing));
 
             Assert.That(ex.Message, Is.EqualTo(
@@ -143,12 +143,12 @@ namespace NUnit.Framework.Assertions
         [Test]
         public void UnrelatedExceptionThrown()
         {
-            var ex = CatchException(() => 
+            var ex = CatchException(() =>
                 Assert.Throws<ArgumentException>(TestDelegates.ThrowsNullReferenceException));
 
             Assert.That(ex.Message, Does.StartWith(
                 "  Expected: <System.ArgumentException>" + Environment.NewLine +
-                "  But was:  <System.NullReferenceException: my message" + Environment.NewLine ));
+                "  But was:  <System.NullReferenceException: my message" + Environment.NewLine));
 
             CheckForSpuriousAssertionResults();
         }
@@ -156,12 +156,12 @@ namespace NUnit.Framework.Assertions
         [Test]
         public void BaseExceptionThrown()
         {
-            var ex = CatchException(() => 
+            var ex = CatchException(() =>
                 Assert.Throws<ArgumentException>(TestDelegates.ThrowsSystemException));
 
             Assert.That(ex.Message, Does.StartWith(
                 "  Expected: <System.ArgumentException>" + Environment.NewLine +
-                "  But was:  <System.Exception: my message" + Environment.NewLine ));
+                "  But was:  <System.Exception: my message" + Environment.NewLine));
 
             CheckForSpuriousAssertionResults();
         }
@@ -169,12 +169,12 @@ namespace NUnit.Framework.Assertions
         [Test, SetUICulture("en-US")]
         public void DerivedExceptionThrown()
         {
-            var ex = CatchException(() => 
+            var ex = CatchException(() =>
                 Assert.Throws<Exception>(TestDelegates.ThrowsArgumentException));
 
             Assert.That(ex.Message, Does.StartWith(
                 "  Expected: <System.Exception>" + Environment.NewLine +
-                "  But was:  <System.ArgumentException: myMessage" + Environment.NewLine + "Parameter name: myParam" + Environment.NewLine ));
+                "  But was:  <System.ArgumentException: myMessage (Parameter 'myParam')" + Environment.NewLine));
 
             CheckForSpuriousAssertionResults();
         }
@@ -190,7 +190,7 @@ namespace NUnit.Framework.Assertions
         [Test]
         public void ThrowsConstraintWrappingAssertFail()
         {
-            Assert.That(() => { Assert.Fail(); }, 
+            Assert.That(() => { Assert.Fail(); },
                 Throws.Exception.TypeOf<AssertionException>());
 
             CheckForSpuriousAssertionResults();
@@ -205,7 +205,7 @@ namespace NUnit.Framework.Assertions
         [Test]
         public void AssertDoesNotThrowFails()
         {
-            var ex = CatchException(() => 
+            var ex = CatchException(() =>
                 Assert.DoesNotThrow(TestDelegates.ThrowsArgumentException));
 
             Assert.That(ex, Is.Not.Null.With.TypeOf<AssertionException>());
diff --git a/src/NUnitFramework/tests/Constraints/ThrowsConstraintTests.cs b/src/NUnitFramework/tests/Constraints/ThrowsConstraintTests.cs
index 18a08e9f..a144cc27 100644
--- src/NUnitFramework/tests/Constraints/ThrowsConstraintTests.cs
+++ src/NUnitFramework/tests/Constraints/ThrowsConstraintTests.cs
@@ -72,7 +72,7 @@ namespace NUnit.Framework.Constraints
 
         static object[] FailureData = new object[]
         {
-            new TestCaseData( new TestDelegate( TestDelegates.ThrowsArgumentException ), $"<System.ArgumentException: myMessage{Environment.NewLine}Parameter name: myParam" ),
+            new TestCaseData( new TestDelegate( TestDelegates.ThrowsArgumentException ), $"<System.ArgumentException: myMessage (Parameter 'myParam')" ),
             new TestCaseData( new TestDelegate( TestDelegates.ThrowsNothing ), "no exception thrown" ),
             new TestCaseData( new TestDelegate( TestDelegates.ThrowsNullReferenceException ), "<System.NullReferenceException: my message" )
         };
